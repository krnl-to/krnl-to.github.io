<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>containers on krnl.to</title>
    <link>/tags/containers/</link>
    <description>Recent content in containers on krnl.to</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Anthony Nandaa</copyright>
    <lastBuildDate>Sat, 11 Feb 2023 17:31:07 +0300</lastBuildDate><atom:link href="/tags/containers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Container Intro Chroot Again</title>
      <link>/posts/linux-container-intro-chroot-again/</link>
      <pubDate>Sat, 11 Feb 2023 17:31:07 +0300</pubDate>
      
      <guid>/posts/linux-container-intro-chroot-again/</guid>
      <description>Intro to Linux Containers Internals: chroot Again In our last post of the series #lci-series, we scratched the surface of what chroot does. It was great to get some feedback on how this lit some light bulbs. We can now agree on the definition that a container is a set of 1 or more processes isolated from the rest of the system. We saw this when we could isolate ls and bash just within our container-intro directory.</description>
      <content>&lt;h1 id=&#34;intro-to-linux-containers-internals-chroot-again&#34;&gt;Intro to Linux Containers Internals: &lt;code&gt;chroot&lt;/code&gt; Again&lt;/h1&gt;
&lt;p&gt;In our &lt;a href=&#34;../linux-containers-intro-chroot/&#34;&gt;last post&lt;/a&gt; of the series &lt;a href=&#34;/tags/lci-series/&#34;&gt;#lci-series&lt;/a&gt;, we scratched the surface of what &lt;code&gt;chroot&lt;/code&gt; does. It was great to get some feedback on how this lit some light bulbs. We can now agree on the definition that &lt;em&gt;a container is a set of 1 or more processes isolated from the rest of the system.&lt;/em&gt; We saw this when we could isolate &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt; just within our &lt;code&gt;container-intro&lt;/code&gt; directory. This was just one aspect of isolation - filesystem isolation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the way, &lt;code&gt;chroot&lt;/code&gt; was introduced in Unix around 1979. That&amp;rsquo;s how old this concept is, and that marked the early beginnings of containers as we know them today. You can read more about the history here - &lt;a href=&#34;https://blog.aquasec.com/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016&#34;&gt;A Brief History of Containers: From the 1970s Till Now&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this series, we would like to explore &lt;code&gt;chroot&lt;/code&gt; further, this time with a &lt;em&gt;full&lt;/em&gt; filesystem, as opposed to the hacky approach we used previously.&lt;/p&gt;
&lt;p&gt;On your Linux system, start by installing &lt;a href=&#34;https://manpages.debian.org/stretch/debootstrap/debootstrap.8.en.html&#34;&gt;&lt;code&gt;debootstrap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install -y binutils debootstrap
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, let&amp;rsquo;s create our directory for the &lt;em&gt;root filesystem&lt;/em&gt;. If you are using WSL on Windows like me, make sure you are working from the linux filesystem and not the &amp;ldquo;Windows mount&amp;rdquo;, i.e. &lt;code&gt;/mnt/c/...&lt;/code&gt;. Therefore, you can &lt;code&gt;cd $HOME&lt;/code&gt; and work from there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# assuming you are in $HOME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s use &lt;code&gt;debootstrap&lt;/code&gt; to create a Ubuntu 22.04 (&lt;code&gt;jammy&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# jammy is the name for Ubuntu 22.04, see https://wiki.ubuntu.com/Releases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo debootstrap --arch amd64 jammy ./ubuntufs http://archive.ubuntu.com/ubuntu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# after running, the last lins should read something like:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I: Base system installed successfully.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; another way of getting a filesystem without using &lt;code&gt;debootstrap&lt;/code&gt; is exporting a Docker container and then extracting it with &lt;code&gt;tar&lt;/code&gt;, e.g. &lt;code&gt;docker export $(docker create ubuntu) | tar -C rootfs -xvf -&lt;/code&gt;. However, we said we don&amp;rsquo;t want to use Docker for demystification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let&amp;rsquo;s &lt;code&gt;chroot&lt;/code&gt; into the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chroot ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we are in:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@nandaa-x1:/# ls
bin boot dev etc home lib lib32 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s run &lt;code&gt;ps&lt;/code&gt; to list processes, however, you will need to first &lt;em&gt;mount&lt;/em&gt; &lt;code&gt;/proc&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@nandaa-x1:/# ps
Error, do this: mount -t proc proc /proc
root@nandaa-x1:/# mount -t proc proc /proc

root@nandaa-x1:/# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0   1744  1080 ?        Sl   15:27   0:00 /init
root         7  0.0  0.0   1752    68 ?        Ss   15:27   0:00 /init
root         8  0.0  0.0   1752    76 ?        S    15:27   0:00 /init
1000         9  0.0  0.0   6332  5368 ?        Ss   15:27   0:00 -bash
root     14351  0.0  0.0   8912  5564 ?        R+   15:55   0:00 sudo chroot co
root     14352  0.0  0.0   8912   880 ?        Ss   15:55   0:00 sudo chroot co
root     14353  0.0  0.0   5040  4000 ?        S    15:55   0:00 /bin/bash -i
root     14365  0.0  0.0   1752    68 ?        Ss   15:58   0:00 /init
root     14366  0.0  0.0   1752    76 ?        S    15:58   0:00 /init
1000     14367  0.0  0.0   6072  5180 ?        Ss+  15:58   0:00 -bash
root     14380  0.0  0.0   7784  3300 ?        R+   15:58   0:00 ps aux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a new tab, if you ran &lt;code&gt;ps aux&lt;/code&gt; on the main system, you should see a similar output. This is because we have not yet achieved &lt;em&gt;namespace isolation&lt;/em&gt;, only &lt;em&gt;filesystem isolation&lt;/em&gt;. We will cover &lt;em&gt;namespace isolation&lt;/em&gt; in our next episode.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading this far; here is &lt;a href=&#34;https://www.youtube.com/watch?v=KFxPr-_v3AI&#34;&gt;another small gift for you&lt;/a&gt;&lt;/em&gt; üôÇ&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Linux Containers Intro: chroot</title>
      <link>/posts/linux-containers-intro-chroot/</link>
      <pubDate>Mon, 06 Feb 2023 14:03:52 +0300</pubDate>
      
      <guid>/posts/linux-containers-intro-chroot/</guid>
      <description>Edited by Ishuah Kariuki
Intro to Linux Containers Internals: chroot Pitch By the end of this post, we will appreciate the idea of a container, within the Linux context. For most people, when you mention containers, the first thing that comes to mind is Docker. What if I told you that containers have nothing to do with Docker; instead it is the other way round.
Actually, this series will introduce Linux container internals without ever using Docker, just to pass the point across.</description>
      <content>&lt;p&gt;&lt;em&gt;Edited by &lt;a href=&#34;https://ishuah.com/&#34;&gt;Ishuah Kariuki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;intro-to-linux-containers-internals-chroot&#34;&gt;Intro to Linux Containers Internals: &lt;code&gt;chroot&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&#34;pitch&#34;&gt;Pitch&lt;/h2&gt;
&lt;p&gt;By the end of this post, we will appreciate the idea of a &lt;em&gt;container&lt;/em&gt;, within the Linux context. For most people, when you mention containers, the first thing that comes to mind is Docker. What if I told you that containers have nothing to do with Docker; instead it is the other way round.&lt;/p&gt;
&lt;p&gt;Actually, this series will introduce Linux container internals without ever using Docker, just to pass the point across.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;NOTE:&lt;/strong&gt; all the examples below are based on &lt;code&gt;Ubuntu 22.04.1 LTS&lt;/code&gt; running on &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/about&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; (WSL2). However, you can still run this on any Linux distro (VM or machine).
&lt;img src=&#34;https://user-images.githubusercontent.com/261265/216800823-0f522fc5-eea1-4fc4-98c0-302c951cf1a6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;enter-chroot&#34;&gt;Enter &lt;code&gt;chroot&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Create a directory, e.g. &lt;code&gt;container_intro&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir container_intro
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add a simple file to the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CONTAINER&amp;#34;&lt;/span&gt; &amp;gt; container_intro/CONTAINER_ROOT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try to &lt;code&gt;chroot&lt;/code&gt; into the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chroot container_intro
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get this error: &lt;code&gt;chroot: failed to run command ‚Äò/bin/bash‚Äô: No such file or directory&lt;/code&gt;. This means that we can get into this directory and use it as our root &lt;code&gt;/&lt;/code&gt;, when we try to execute &lt;code&gt;bash&lt;/code&gt; which should be in &lt;code&gt;/bin/bash&lt;/code&gt;, it is not found.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s copy &lt;code&gt;/bin/bash&lt;/code&gt; (and one more command &lt;code&gt;ls&lt;/code&gt;, that we will run afterwards) from the current system to our directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir container_intro/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /bin/bash /bin/ls container_intro/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now back to &lt;code&gt;chroot&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo chroot container_into
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still not working! This is because &lt;code&gt;bash&lt;/code&gt; has dependancy on other libraries. Let&amp;rsquo;s view them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldd /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    linux-vdso.so.1 (0x00007ffe20ff5000)
    libtinfo.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007fdbf1438000)
    libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdbf1210000)
    /lib64/ld-linux-x86-64.so.2 (0x00007fdbf15d2000)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s go ahead and copy them into our directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir container_intro/lib&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;,64&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# creates both lib and lib64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    container_intro/lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib64/ld-linux-x86-64.so.2 container_intro/lib64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s do the same for &lt;code&gt;ls&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldd /bin/ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    linux-vdso.so.1 (0x00007ffcccf2f000)
    libselinux.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f932a5fc000)
    libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f932a3d4000)
    libpcre2-8.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f932a33d000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f932a653000)
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib/x86_64-linux-gnu/libselinux.so.1 /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    /lib/x86_64-linux-gnu/libpcre2-8.so.0 container_intro/lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib64/ld-linux-x86-64.so.2 container_intro/lib64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, back to our &lt;code&gt;chroot&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chroot container_intro
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we are in! We should see the prompt:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bash-5.1#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s run &lt;code&gt;ls&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bash-5.1# ls
CONTAINER_ROOT  bin  lib  lib64
bash-5.1#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, essentially, we are &lt;strong&gt;contained&lt;/strong&gt; within that directory as our whole world (file system). As far as we are concerned, we can&amp;rsquo;t jump out of it.&lt;/p&gt;
&lt;h2 id=&#34;next-episode-spoiler-alert&#34;&gt;Next Episode: Spoiler Alert&lt;/h2&gt;
&lt;p&gt;We have looked at a hacky solution for getting only two processes: &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; up and running. In the next episode, we will look at setting up a full &lt;em&gt;filesystem&lt;/em&gt;. For the eager learners, you can check out &lt;a href=&#34;https://manpages.debian.org/stretch/debootstrap/debootstrap.8.en.html&#34;&gt;&lt;code&gt;debootstrap&lt;/code&gt;&lt;/a&gt;. See you next!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading this far. If you followed this walkthrough hands-on, here is a &lt;a href=&#34;https://www.youtube.com/watch?v=kIjExHdnx2E&#34;&gt;small gift for you&lt;/a&gt;!&lt;/em&gt; üòÄ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Footnote / Further Reading:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/100-days-of-linux/chroot-a-linux-wonder-fc36ed08087e&#34;&gt;https://medium.com/100-days-of-linux/chroot-a-linux-wonder-fc36ed08087e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://btholt.github.io/complete-intro-to-containers/chroot&#34;&gt;https://btholt.github.io/complete-intro-to-containers/chroot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Windows Container Internals - Prep</title>
      <link>/posts/windows-container-internals-prep/</link>
      <pubDate>Wed, 01 Feb 2023 16:13:41 +0300</pubDate>
      
      <guid>/posts/windows-container-internals-prep/</guid>
      <description>Before we kick off this series, let&amp;rsquo;s take a detour first and look at Linux Containers first. Start here: Linux Containers Intro: chroot.
I would like to kick off a step-by-step series that takes us through the journey of understanding the internals of Windows Containers. Notice I say us because it is a journey that I&amp;rsquo;m also taking.
Before we begin the journey, let&amp;rsquo;s get a few things out of the way:</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Before we kick off this series, let&amp;rsquo;s take a detour first and look at Linux Containers first. Start here: &lt;a href=&#34;/posts/linux-containers-intro-chroot&#34;&gt;Linux Containers Intro: &lt;code&gt;chroot&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I would like to kick off a step-by-step series that takes &lt;strong&gt;us&lt;/strong&gt; through the journey of understanding the internals of &lt;a href=&#34;https://learn.microsoft.com/en-us/virtualization/windowscontainers/about/&#34;&gt;Windows Containers&lt;/a&gt;. Notice I say &lt;em&gt;us&lt;/em&gt; because it is a journey that I&amp;rsquo;m also taking.&lt;/p&gt;
&lt;p&gt;Before we begin the journey, let&amp;rsquo;s get a few things out of the way:&lt;/p&gt;
&lt;p&gt;// TBD&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
