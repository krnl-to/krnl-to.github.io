<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lci-series on krnl.to</title>
    <link>/tags/lci-series/</link>
    <description>Recent content in lci-series on krnl.to</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Anthony Nandaa</copyright>
    <lastBuildDate>Wed, 22 Feb 2023 12:28:31 +0300</lastBuildDate><atom:link href="/tags/lci-series/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Containers Internals: Namespaces</title>
      <link>/posts/linux-containers-namespaces/</link>
      <pubDate>Wed, 22 Feb 2023 12:28:31 +0300</pubDate>
      
      <guid>/posts/linux-containers-namespaces/</guid>
      <description>Intro to Linux Containers Internals: namespaces In our last post of the series #lci-series, we ran a container using chroot and a complete filesystem. We managed to isolate ls and bash within our container-intro directory. However, ps aux lists all the processes on the host environment because we didn&amp;rsquo;t implement namespace isolation. This article will focus on namespaces. Why they exist and how to implement them in our container.
Working Without Namespaces We&amp;rsquo;ll start by demonstrating the perils of using chroot without namespaces.</description>
      <content>&lt;h1 id=&#34;intro-to-linux-containers-internals-namespaces&#34;&gt;Intro to Linux Containers Internals: namespaces&lt;/h1&gt;
&lt;p&gt;In our &lt;a href=&#34;../linux-container-intro-chroot-again/&#34;&gt;last post&lt;/a&gt; of the series &lt;a href=&#34;/tags/lci-series/&#34;&gt;#lci-series&lt;/a&gt;, we ran a container using chroot and a complete filesystem. We managed to isolate &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt; within our &lt;code&gt;container-intro&lt;/code&gt; directory. However, &lt;code&gt;ps aux&lt;/code&gt; lists all the processes on the host environment because we didn&amp;rsquo;t implement &lt;code&gt;namespace&lt;/code&gt; isolation. This article will focus on namespaces. Why they exist and how to implement them in our container.&lt;/p&gt;
&lt;h2 id=&#34;working-without-namespaces&#34;&gt;Working Without Namespaces&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll start by demonstrating the perils of using &lt;code&gt;chroot&lt;/code&gt; without namespaces. If you don&amp;rsquo;t have it running already, fire up the container from &lt;a href=&#34;../linux-container-intro-chroot-again/&#34;&gt;Linux Containers Intro: Chroot Again&lt;/a&gt; and mount the &lt;code&gt;proc&lt;/code&gt; filesystem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo chroot ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# once you&amp;#39;re in the container, mount proc with the next command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mount -t proc proc /proc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s start a foreground process on your host environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run this on the host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# you can tail any of the log files in /var&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# there&amp;#39;s nothing special with bootstrap.log :)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tail -f /var/log/bootstrap.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;ps aux&lt;/code&gt; on your container.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@container:/# ps aux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;2276&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1536&lt;/span&gt; ?        Sl   08:38   0:00 /init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root         &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;2276&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; ?        Sl   08:38   0:00 plan9 --control-socket &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; --log-level
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root         &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;2280&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; ?        Ss   08:38   0:00 /init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root         &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;2296&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; ?        R    08:38   0:00 /init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;6340&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5280&lt;/span&gt; ?        Ss   08:38   0:00 -bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root        &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;2280&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; ?        Ss   08:47   0:00 /init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root        &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;2296&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; ?        S    08:47   0:00 /init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;6340&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5392&lt;/span&gt; ?        Ss   08:47   0:00 -bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root     &lt;span style=&#34;color:#ae81ff&#34;&gt;13975&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;8920&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5340&lt;/span&gt; ?        R+   08:58   0:00 sudo chroot ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root     &lt;span style=&#34;color:#ae81ff&#34;&gt;13976&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;8920&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;884&lt;/span&gt; ?        Ss   08:58   0:00 sudo chroot ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root     &lt;span style=&#34;color:#ae81ff&#34;&gt;13977&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;5040&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4048&lt;/span&gt; ?        S    08:58   0:00 /bin/bash -i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;14184&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;3236&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1100&lt;/span&gt; ?        S+   12:33   0:00 tail -f /var/log/bootstrap.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root     &lt;span style=&#34;color:#ae81ff&#34;&gt;14185&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;7784&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3396&lt;/span&gt; ?        R+   12:37   0:00 ps aux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we saw in the last post, this command lists all the processes in the host environment. One of these processes is the foreground process we started on the host system. In my example, the process has a PID of &lt;code&gt;14184&lt;/code&gt;. Let&amp;rsquo;s kill this process from the container.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run this from the container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kill &lt;span style=&#34;color:#ae81ff&#34;&gt;14184&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What happens next? The tail process in the host environment gets terminated! Are you scared yet? There&amp;rsquo;s more. Let&amp;rsquo;s check the hostname on your host environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run this command on your host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ishuah@h0st-5ys:~$ hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h0st-5ys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the same command in your container will yield the same hostname. Let&amp;rsquo;s change the hostname in the container.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run these commands in your container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@container:/# hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h0st-5ys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@container:/# hostname newh0stname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@container:/# hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newh0stname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ve successfully changed the hostname in the container to &lt;code&gt;newh0stname&lt;/code&gt;. Now check the hostname on the host system.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run this command on your host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ishuah@h0st-5ys:~$ hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newh0stname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What happened? Changing the hostname on the container affected the host env - they share the same hostname!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run this in the container and the host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the namespace ids are the same in both envs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# i.e &amp;#39;ipc:[4026532271]&amp;#39; -&amp;gt; &amp;#39;namespace:[id]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -l /proc/$$/ns
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 cgroup -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cgroup:[4026531835]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 ipc -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ipc:[4026532271]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 mnt -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mnt:[4026532282]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 net -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;net:[4026531840]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 pid -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pid:[4026532284]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 pid_for_children -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pid:[4026532284]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 user -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user:[4026531837]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 16:37 uts -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uts:[4026532283]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Namespaces are a Linux kernel feature that partitions kernel resources to create isolated environments within a Linux system. &lt;a href=&#34;https://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;You can read more about namespaces here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The host env and the container share &lt;a href=&#34;https://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;namespaces&lt;/a&gt;. That&amp;rsquo;s why you can see the host&amp;rsquo;s PIDs (&lt;a href=&#34;https://man7.org/linux/man-pages/man7/pid_namespaces.7.html&#34;&gt;&lt;code&gt;pid&lt;/code&gt; namespace&lt;/a&gt;) and change the hostname (&lt;a href=&#34;https://man7.org/linux/man-pages/man7/uts_namespaces.7.html&#34;&gt;&lt;code&gt;uts&lt;/code&gt; namespace&lt;/a&gt;) from the container.&lt;/p&gt;
&lt;h2 id=&#34;implementing-namespaces-with-unshare&#34;&gt;Implementing Namespaces with &lt;code&gt;unshare&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Close your container and create a new one with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo unshare --mount --uts --ipc --net --pid --user --fork --map-root-user chroot ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man1/unshare.1.html&#34;&gt;&lt;code&gt;Unshare&lt;/code&gt;&lt;/a&gt; is a Linux utility package that allows you to run a program with some namespaces &amp;lsquo;unshared&amp;rsquo; from its parent. The command above creates a container similar to previous runs, except now we have isolated namespaces. The &lt;code&gt;--mount --uts --ipc --net --pid --user&lt;/code&gt; flags instruct unshare to execute chroot in new namespaces, see summary details below from the Linux docs. I didn&amp;rsquo;t include the &lt;code&gt;cgroup&lt;/code&gt; namespace here - we&amp;rsquo;ll go through it in the next installment of this series.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/321040/220844132-79460e05-4370-4557-8fbd-8eb995bd7078.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check the namespaces in both environments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# on the host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -l /proc/$$/ns
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 cgroup -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cgroup:[4026531835]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 ipc -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ipc:[4026532271]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 mnt -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mnt:[4026532282]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 net -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;net:[4026531840]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 pid -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pid:[4026532284]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 pid_for_children -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pid:[4026532284]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 user -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user:[4026531837]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ishuah ishuah &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 17:06 uts -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uts:[4026532283]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# on the container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mount the proc filesystem first&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; mount -t proc proc /proc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# then check the namespaces&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -l /proc/$$/ns
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 cgroup -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cgroup:[4026531835]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 ipc -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ipc:[4026532328]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 mnt -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mnt:[4026532326]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 net -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;net:[4026532330]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 pid -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pid:[4026532329]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 pid_for_children -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pid:[4026532329]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 user -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user:[4026532325]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 14:05 uts -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uts:[4026532327]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The two environments don&amp;rsquo;t share namespaces anymore! (Except for &lt;code&gt;cgroup&lt;/code&gt;, we&amp;rsquo;ll get into that later).&lt;/p&gt;
&lt;p&gt;Running the &lt;code&gt;ps&lt;/code&gt; and &lt;code&gt;hostname&lt;/code&gt; demos will now yield different results.&lt;/p&gt;
&lt;p&gt;On the container, &lt;code&gt;px aux&lt;/code&gt; now only lists processes within that environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ps aux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;5040&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3820&lt;/span&gt; ?        S    16:17   0:00 /bin/bash -i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root        &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  0.0  0.0   &lt;span style=&#34;color:#ae81ff&#34;&gt;7476&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3092&lt;/span&gt; ?        R+   16:19   0:00 ps aux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try running our &lt;code&gt;hostname&lt;/code&gt; demo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run these commands in the chroot&amp;#39;s env&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@container:/# hostname newh0stname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@container:/# hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newh0stname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then check the host env hostname:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run this command on your host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ishuah@h0st-5ys:~$ hostname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;h0st-5ys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hostname changes on the container are limited to that environment. The host is not affected.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve created a namespaced container - Which means we have &lt;strong&gt;namespace isolation&lt;/strong&gt; for the processes running in the container.&lt;/p&gt;
&lt;h3 id=&#34;next-episode-spoiler-alert&#34;&gt;Next Episode: Spoiler Alert&lt;/h3&gt;
&lt;p&gt;The isolated environments still have access to all physical resources on your computer. That means your namespaced container can hog all the available RAM and CPU cycles with reckless abandon. In the next episode, we&amp;rsquo;ll use &lt;code&gt;cgroups&lt;/code&gt; to isolate resource usage for a group of tasks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading this far. As culture dictates, here is a &lt;a href=&#34;https://www.youtube.com/watch?v=jiiFzKfuPMk&#34;&gt;small gift for you&lt;/a&gt;!&lt;/em&gt; 😀&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Linux Containers Internals: chroot Again</title>
      <link>/posts/linux-container-intro-chroot-again/</link>
      <pubDate>Sat, 11 Feb 2023 17:31:07 +0300</pubDate>
      
      <guid>/posts/linux-container-intro-chroot-again/</guid>
      <description>Intro to Linux Containers Internals: chroot Again In our last post of the series #lci-series, we scratched the surface of what chroot does. It was great to get some feedback on how this lit some light bulbs. We can now agree on the definition that a container is a set of 1 or more processes isolated from the rest of the system. We saw this when we could isolate ls and bash just within our container-intro directory.</description>
      <content>&lt;h1 id=&#34;intro-to-linux-containers-internals-chroot-again&#34;&gt;Intro to Linux Containers Internals: &lt;code&gt;chroot&lt;/code&gt; Again&lt;/h1&gt;
&lt;p&gt;In our &lt;a href=&#34;../linux-containers-intro-chroot/&#34;&gt;last post&lt;/a&gt; of the series &lt;a href=&#34;/tags/lci-series/&#34;&gt;#lci-series&lt;/a&gt;, we scratched the surface of what &lt;code&gt;chroot&lt;/code&gt; does. It was great to get some feedback on how this lit some light bulbs. We can now agree on the definition that &lt;em&gt;a container is a set of 1 or more processes isolated from the rest of the system.&lt;/em&gt; We saw this when we could isolate &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt; just within our &lt;code&gt;container-intro&lt;/code&gt; directory. This was just one aspect of isolation - filesystem isolation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the way, &lt;code&gt;chroot&lt;/code&gt; was introduced in Unix around 1979. That&amp;rsquo;s how old this concept is, and that marked the early beginnings of containers as we know them today. You can read more about the history here - &lt;a href=&#34;https://blog.aquasec.com/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016&#34;&gt;A Brief History of Containers: From the 1970s Till Now&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this series, we would like to explore &lt;code&gt;chroot&lt;/code&gt; further, this time with a &lt;em&gt;full&lt;/em&gt; filesystem, as opposed to the hacky approach we used previously.&lt;/p&gt;
&lt;p&gt;On your Linux system, start by installing &lt;a href=&#34;https://manpages.debian.org/stretch/debootstrap/debootstrap.8.en.html&#34;&gt;&lt;code&gt;debootstrap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install -y binutils debootstrap
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, let&amp;rsquo;s create our directory for the &lt;em&gt;root filesystem&lt;/em&gt;. If you are using WSL on Windows like me, make sure you are working from the linux filesystem and not the &amp;ldquo;Windows mount&amp;rdquo;, i.e. &lt;code&gt;/mnt/c/...&lt;/code&gt;. Therefore, you can &lt;code&gt;cd $HOME&lt;/code&gt; and work from there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# assuming you are in $HOME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s use &lt;code&gt;debootstrap&lt;/code&gt; to create a Ubuntu 22.04 (&lt;code&gt;jammy&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# jammy is the name for Ubuntu 22.04, see https://wiki.ubuntu.com/Releases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo debootstrap --arch amd64 jammy ./ubuntufs http://archive.ubuntu.com/ubuntu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# after running, the last lins should read something like:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I: Base system installed successfully.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;ℹ️ &lt;strong&gt;Note:&lt;/strong&gt; another way of getting a filesystem without using &lt;code&gt;debootstrap&lt;/code&gt; is exporting a Docker container and then extracting it with &lt;code&gt;tar&lt;/code&gt;, e.g. &lt;code&gt;docker export $(docker create ubuntu) | tar -C rootfs -xvf -&lt;/code&gt;. However, we said we don&amp;rsquo;t want to use Docker for demystification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let&amp;rsquo;s &lt;code&gt;chroot&lt;/code&gt; into the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chroot ubuntufs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we are in:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@nandaa-x1:/# ls
bin boot dev etc home lib lib32 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s run &lt;code&gt;ps&lt;/code&gt; to list processes, however, you will need to first &lt;em&gt;mount&lt;/em&gt; &lt;code&gt;/proc&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/proc&lt;/code&gt; is a virtual filesystem, sometimes referred to as a &lt;em&gt;process information pseudo-file system&lt;/em&gt;; that contains runtime system information (e.g. system memory, devices mounted, hardware configuration, etc). You can &lt;a href=&#34;https://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html&#34;&gt;read more about it here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@nandaa-x1:/# ps
Error, do this: mount -t proc proc /proc
root@nandaa-x1:/# mount -t proc proc /proc

root@nandaa-x1:/# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0   1744  1080 ?        Sl   15:27   0:00 /init
root         7  0.0  0.0   1752    68 ?        Ss   15:27   0:00 /init
root         8  0.0  0.0   1752    76 ?        S    15:27   0:00 /init
1000         9  0.0  0.0   6332  5368 ?        Ss   15:27   0:00 -bash
root     14351  0.0  0.0   8912  5564 ?        R+   15:55   0:00 sudo chroot co
root     14352  0.0  0.0   8912   880 ?        Ss   15:55   0:00 sudo chroot co
root     14353  0.0  0.0   5040  4000 ?        S    15:55   0:00 /bin/bash -i
root     14365  0.0  0.0   1752    68 ?        Ss   15:58   0:00 /init
root     14366  0.0  0.0   1752    76 ?        S    15:58   0:00 /init
1000     14367  0.0  0.0   6072  5180 ?        Ss+  15:58   0:00 -bash
root     14380  0.0  0.0   7784  3300 ?        R+   15:58   0:00 ps aux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a new tab, if you ran &lt;code&gt;ps aux&lt;/code&gt; on the main system, you should see a similar output. This is because we have not yet achieved &lt;em&gt;namespace isolation&lt;/em&gt;, only &lt;em&gt;filesystem isolation&lt;/em&gt;. We will cover &lt;em&gt;namespace isolation&lt;/em&gt; in our next episode.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading this far; here is &lt;a href=&#34;https://www.youtube.com/watch?v=KFxPr-_v3AI&#34;&gt;another small gift for you&lt;/a&gt;&lt;/em&gt; 🙂&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Linux Containers Internals: chroot</title>
      <link>/posts/linux-containers-intro-chroot/</link>
      <pubDate>Mon, 06 Feb 2023 14:03:52 +0300</pubDate>
      
      <guid>/posts/linux-containers-intro-chroot/</guid>
      <description>Edited by Ishuah Kariuki
Intro to Linux Containers Internals: chroot Pitch By the end of this post, we will appreciate the idea of a container, within the Linux context. For most people, when you mention containers, the first thing that comes to mind is Docker. What if I told you that containers have nothing to do with Docker; instead it is the other way round.
Actually, this series will introduce Linux container internals without ever using Docker, just to pass the point across.</description>
      <content>&lt;p&gt;&lt;em&gt;Edited by &lt;a href=&#34;https://ishuah.com/&#34;&gt;Ishuah Kariuki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;intro-to-linux-containers-internals-chroot&#34;&gt;Intro to Linux Containers Internals: &lt;code&gt;chroot&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&#34;pitch&#34;&gt;Pitch&lt;/h2&gt;
&lt;p&gt;By the end of this post, we will appreciate the idea of a &lt;em&gt;container&lt;/em&gt;, within the Linux context. For most people, when you mention containers, the first thing that comes to mind is Docker. What if I told you that containers have nothing to do with Docker; instead it is the other way round.&lt;/p&gt;
&lt;p&gt;Actually, this series will introduce Linux container internals without ever using Docker, just to pass the point across.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ℹ️ &lt;strong&gt;NOTE:&lt;/strong&gt; all the examples below are based on &lt;code&gt;Ubuntu 22.04.1 LTS&lt;/code&gt; running on &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/about&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; (WSL2). However, you can still run this on any Linux distro (VM or machine).
&lt;img src=&#34;https://user-images.githubusercontent.com/261265/216800823-0f522fc5-eea1-4fc4-98c0-302c951cf1a6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;enter-chroot&#34;&gt;Enter &lt;code&gt;chroot&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Create a directory, e.g. &lt;code&gt;container_intro&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir container_intro
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add a simple file to the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CONTAINER&amp;#34;&lt;/span&gt; &amp;gt; container_intro/CONTAINER_ROOT
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try to &lt;code&gt;chroot&lt;/code&gt; into the directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chroot container_intro
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get this error: &lt;code&gt;chroot: failed to run command ‘/bin/bash’: No such file or directory&lt;/code&gt;. This means that we can get into this directory and use it as our root &lt;code&gt;/&lt;/code&gt;, when we try to execute &lt;code&gt;bash&lt;/code&gt; which should be in &lt;code&gt;/bin/bash&lt;/code&gt;, it is not found.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s copy &lt;code&gt;/bin/bash&lt;/code&gt; (and one more command &lt;code&gt;ls&lt;/code&gt;, that we will run afterwards) from the current system to our directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir container_intro/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /bin/bash /bin/ls container_intro/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now back to &lt;code&gt;chroot&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo chroot container_into
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still not working! This is because &lt;code&gt;bash&lt;/code&gt; has dependancy on other libraries. Let&amp;rsquo;s view them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldd /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    linux-vdso.so.1 (0x00007ffe20ff5000)
    libtinfo.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007fdbf1438000)
    libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdbf1210000)
    /lib64/ld-linux-x86-64.so.2 (0x00007fdbf15d2000)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s go ahead and copy them into our directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir container_intro/lib&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;,64&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# creates both lib and lib64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib/x86_64-linux-gnu/libtinfo.so.6 /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    container_intro/lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib64/ld-linux-x86-64.so.2 container_intro/lib64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s do the same for &lt;code&gt;ls&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldd /bin/ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    linux-vdso.so.1 (0x00007ffcccf2f000)
    libselinux.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f932a5fc000)
    libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f932a3d4000)
    libpcre2-8.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f932a33d000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f932a653000)
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib/x86_64-linux-gnu/libselinux.so.1 /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    /lib/x86_64-linux-gnu/libpcre2-8.so.0 container_intro/lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /lib64/ld-linux-x86-64.so.2 container_intro/lib64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, back to our &lt;code&gt;chroot&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chroot container_intro
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we are in! We should see the prompt:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bash-5.1#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s run &lt;code&gt;ls&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bash-5.1# ls
CONTAINER_ROOT  bin  lib  lib64
bash-5.1#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, essentially, we are &lt;strong&gt;contained&lt;/strong&gt; within that directory as our whole world (file system). As far as we are concerned, we can&amp;rsquo;t jump out of it.&lt;/p&gt;
&lt;h2 id=&#34;next-episode-spoiler-alert&#34;&gt;Next Episode: Spoiler Alert&lt;/h2&gt;
&lt;p&gt;We have looked at a hacky solution for getting only two processes: &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; up and running. In the next episode, we will look at setting up a full &lt;em&gt;filesystem&lt;/em&gt;. For the eager learners, you can check out &lt;a href=&#34;https://manpages.debian.org/stretch/debootstrap/debootstrap.8.en.html&#34;&gt;&lt;code&gt;debootstrap&lt;/code&gt;&lt;/a&gt;. See you next!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading this far. If you followed this walkthrough hands-on, here is a &lt;a href=&#34;https://www.youtube.com/watch?v=kIjExHdnx2E&#34;&gt;small gift for you&lt;/a&gt;!&lt;/em&gt; 😀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Footnote / Further Reading:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/100-days-of-linux/chroot-a-linux-wonder-fc36ed08087e&#34;&gt;https://medium.com/100-days-of-linux/chroot-a-linux-wonder-fc36ed08087e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://btholt.github.io/complete-intro-to-containers/chroot&#34;&gt;https://btholt.github.io/complete-intro-to-containers/chroot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
